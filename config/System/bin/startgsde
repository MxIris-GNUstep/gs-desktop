#!/bin/bash

function start_workspace {
  (/Applications/GWorkspace.app/GWorkspace) &
  GW_PID="$!"

  echo "Workspace is running on $GW_PID"
  echo "$GW_PID" > /tmp/$UID-gw.pid
}

function stop_workspace {
  PID=`cat /tmp/$UID-gw.pid 2>/dev/null`
  if [ -n "x$PID" ];then
    echo "stopping Workspace on $PID"
    kill -9 $PID 2> /dev/null && rm /tmp/$UID-gw.pid
  fi
}


function start_windowmanager {
  (/System/bin/wmaker $WM_ARGS) &
  WM_PID="$!"

  echo "WM is running on $WM_PID"
  export GS_DESKTOP_WM_PID="$WM_PID"
  sleep 1
}

function stop_windowmanager {
  echo "stopping WM on $WM_PID"
  if [ -n "$WM_PID" ];then
    pkill -P "$WM_PID" 2>/dev/null
  fi
}

function start_services {
  echo "making services"
  /Library/bin/make_services

  echo "about to start Notification Center"
  /Library/bin/gdnc --daemon &
  echo "$!" > /tmp/$UID-gdnc.pid

  echo "about to start Pasteboard Service"
  /Library/bin/gpbs --daemon &
  echo "$!" > /tmp/$UID-gpbs.pid
}

function stop_services {
  echo "about to stop Notification Center"
  PID=`cat /tmp/$UID-gdnc.pid 2>/dev/null`
  if [ -n "x$PID" ];then
    kill $PID 2> /dev/null && rm /tmp/$UID-gdnc.pid
  fi

  echo "about to stop Pasteboard Service"
  PID=`cat /tmp/$UID-gpbs.pid 2>/dev/null`
  if [ -n "x$PID" ];then
    kill $PID 2> /dev/null && rm /tmp/$UID-gpbs.pid
  fi
}

function init_config {
  if [ ! -f "$HOME/Library/WindowMaker/Defaults/WindowMaker" ];then
    echo "init WindowMaker defaults"
    /System/bin/wmaker.inst --batch
  fi
  if [ ! -f "$HOME/Library/Preferences/NSGlobalDomain.plist" ];then
    echo "init user preferences defaults"
    mkdir "$HOME/Library/Preferences" 2>/dev/null
    cp /Library/Preferences/* "$HOME/Library/Preferences/"

    mkdir "$HOME/Library/Preferences/.NextSpace" 2>/dev/null
    cp /Library/Preferences/.NextSpace/* "$HOME/Library/Preferences/.NextSpace"
  fi
  if [ ! -d "$HOME/Library/Services" ];then
    echo "init user services defaults"
    mkdir "$HOME/Library/Services" 2>/dev/null
    cp /Library/Services/*.plist "$HOME/Library/Services/"
  fi

  defaults read NSGlobalDomain "Local Time Zone" 2>&1 > /dev/null
  if [ $? -ne 0 ]; then
    TZ=`cat /etc/timezone`
    echo "setting default timezone to $TZ"
    defaults write NSGlobalDomain "Local Time Zone" $TZ
  fi

  defaults read NSGlobalDomain "GSBackend" 2>&1 > /dev/null
  if [ $? -ne 0 ]; then
    echo "setting default backend to Cairo"
    defaults write NSGlobalDomain "GSBackend" "cairo"
  fi

  export FONTCONFIG_FILE=/System/etc/fonts.conf
 
  wdwrite WMWindowAttributes 'GSDE-Safe-Mode.XTerm' '{ DontSaveSession = Yes; }'
  wdwrite WMWindowAttributes 'GWorkspace.GNUstep' '{ DontSaveSession = Yes; }'
}

function start_debug {
  WM_ARGS="--static --dont-restore"
  init_config
  main_process

  wait $GW_PID
  cleanup
}

function start_normal {
  WM_ARGS=""
  init_config
  main_process
 
  wait $GW_PID
  sleep 1
  cleanup
}

function main_process {
  start_services
  start_windowmanager
  start_workspace 
}

function cleanup {
  echo "cleanup"
  stop_workspace 
  stop_services
  stop_windowmanager
  exit
}

echo "starting GS Desktop"

if [ "$1" == "--safe-mode-continue" ];then

  echo "press [y] to exit to the shell, otherwise continue"
  read -s -n 1 DD
  if [ "$DD" == "y" ];then
    export GS_DESKTOP_SAFEMODE="safe"
    echo "switching to the safe mode"
    echo "/System/bin/startgsde to run the desktop environment"
    exec /bin/sh
  fi
fi

if [ "$1" == "--safe-mode" ];then
  exec xterm -name GSDE-Safe-Mode -e "$0" --safe-mode-continue
fi

export WMAKER_USER_ROOT=$HOME/Library/WindowMaker
export PATH=/System/bin:$PATH
export GS_DESKTOP_LOG=/tmp/$UID-gs-desktop.log

source /Developer/Makefiles/GNUstep.sh

WM_ARGS=""
if [ -n "$GS_DESKTOP_SAFEMODE" ];then
  echo "running in SAFE mode"
  trap cleanup SIGINT
  start_debug |& tee $GS_DESKTOP_LOG
else
  start_normal > $GS_DESKTOP_LOG 2>&1
fi
