#!/bin/bash

function show_status {
  xsetroot -solid "$1" || exit 1
}

function start_workspace {
  (/System/Applications/GWorkspace.app/GWorkspace) &
  GW_PID="$!"

  echo "Workspace is running on $GW_PID"
  echo "$GW_PID" > /tmp/$UID-gw.pid
}

function stop_workspace {
  PID=`cat /tmp/$UID-gw.pid 2>/dev/null`
  if [ -n "$PID" ];then
    echo "stopping all children of Workspace $PID"
    pkill -P "$PID"
    sleep 1

    echo "stopping Workspace on $PID"
    kill -9 $PID 2> /dev/null
    rm /tmp/$UID-gw.pid
  fi
}

function start_windowmanager {
  show_status "gray40"

  (/System/bin/wmaker $WM_ARGS) &
  WM_PID="$!"

  echo "WM is running on $WM_PID"
  echo "$WM_PID" > /tmp/$UID-wm.pid
  export GS_DESKTOP_WM_PID="$WM_PID"

  if [ -n "$START_PICOM" ] && [ -f "$HOME/Library/etc/picom.conf" ];then
    echo "about to start picom"
    picom -b --conf $HOME/Library/etc/picom.conf --write-pid-path /tmp/$UID-picom.pid
  fi
}

function stop_windowmanager {
  PID=`cat /tmp/$UID-wm.pid 2>/dev/null`
  if [ -n "$PID" ];then
    echo "stopping WM on $PID"
    pkill -P "$PID" 2>/dev/null
    kill "$PID"     2>/dev/null
    rm /tmp/$UID-wm.pid
  fi

  PID=`cat /tmp/$UID-picom.pid 2>/dev/null`
  if [ -n "$PID" ];then
    echo "stopping picom on $PID"
    kill "$PID" 2>/dev/null
    rm /tmp/$UID-picom.pid
  fi
}

function start_helpers {
  echo "about to start Notification Monitor"
  /System/Applications/NotMon.app/NotMon -GSSuppressAppIcon YES -autolaunch YES &
  echo "$!" > /tmp/$UID-notmon.pid
  
  echo "about to start Gesture Helper"
  /System/Applications/GestureHelper.app/GestureHelper -GSSuppressAppIcon YES -autolaunch YES &
  echo "$!" > /tmp/$UID-gesthelp.pid
}

function start_services {
  show_status "gray15"
 
  /Library/bin/gdomap -N | grep ^failed 2>/dev/null
  if [ $? -eq 1 ];then
    echo "gdopmap is running, set NSPortIsMessagePort NO"
    /Library/bin/defaults write NSGlobalDomain NSPortIsMessagePort NO
  else
    echo "not running!"
    echo "you might want to consider installing gdomap as system service"
    /Library/bin/defaults write NSGlobalDomain NSPortIsMessagePort YES
  fi

  echo "about to start Notification Center"
  /Library/bin/gdnc --daemon &
  echo "$!" > /tmp/$UID-gdnc.pid
  sleep 1

  show_status "gray20"
  echo "about to start Pasteboard Service"
  /Library/bin/gpbs --daemon &
  echo "$!" > /tmp/$UID-gpbs.pid
  sleep 0.1

  # needed to start synchronizing the X11 CLIPBOARD
  echo " " | /Library/bin/nxpasteboard --copy

  show_status "gray25"
  echo "about to start fswatcher Service"
  /Library/bin/fswatcher --daemon &
  echo "$!" > /tmp/$UID-fswatcher.pid
  sleep 0.1

  show_status "gray30"
  echo "about to start ddbd Service"
  /Library/bin/ddbd --daemon &
  echo "$!" > /tmp/$UID-ddbd.pid
  sleep 0.1

  show_status "gray35"
  echo "making services"
  /Library/bin/make_services

}

function _kill_proc {
  PID=`cat /tmp/$UID-$1.pid 2>/dev/null`
  if [ -n "$PID" ];then
    kill $PID 2> /dev/null && rm /tmp/$UID-$1.pid
    sleep 0.1
  fi
}

function stop_services {
  echo "about to stop ddbd Service"
  _kill_proc ddbd

  echo "about to stop fswatcher Service"
  _kill_proc fswatcher

  echo "about to stop Notification Monitor"
  _kill_proc notmon

  echo "about to stop Gesture Helper"
  _kill_proc gesthelp

  echo "about to stop Pasteboard Service"
  _kill_proc gpbs

  echo "about to stop Notification Center"
  _kill_proc gdnc
}

function init_config {
  show_status "gray10"

  if [ ! -f "$HOME/Library/etc/GSDE.conf" ];then
    echo "init user defaults"
    mkdir "$HOME/Library" 2>/dev/null
    cp -fR /etc/skel/Library/* "$HOME/Library"
  fi
 
  if [ ! -f "$HOME/Library/WindowMaker/Defaults/WindowMaker" ];then
    echo "init WindowMaker defaults"
    /System/bin/wmaker.inst --batch
    cp /System/etc/WindowMaker/WMRootMenu "$HOME/Library/WindowMaker/Defaults"
  fi

  if [ ! -f "$HOME/Library/Preferences/NSGlobalDomain.plist" ];then
    echo "init user preferences defaults"
    mkdir "$HOME/Library/Preferences" 2>/dev/null
    cp /Library/Preferences/* "$HOME/Library/Preferences/"

    mkdir "$HOME/Library/Preferences/.NextSpace" 2>/dev/null
    cp /Library/Preferences/.NextSpace/* "$HOME/Library/Preferences/.NextSpace"
  fi

  TZ=`defaults read NSGlobalDomain "Local Time Zone" 2>/dev/null`
  TZ=${TZ:33}
  if [ -n "$TZ" ]; then
    echo "setting session timezone to $TZ"
    export TZ
  else
    TZ=`cat /etc/timezone`
    echo "setting default timezone to $TZ"
    defaults write NSGlobalDomain "Local Time Zone" $TZ
  fi

  defaults read NSGlobalDomain "GSBackend" 2>&1 > /dev/null
  if [ $? -ne 0 ]; then
    echo "setting default backend to Cairo"
    defaults write NSGlobalDomain "GSBackend" "cairo"
  fi

  /System/bin/mkfontconfig
  if [ -f "$HOME/Library/etc/fonts.conf" ];then
    export FONTCONFIG_FILE=$HOME/Library/etc/fonts.conf
  fi
 
  wdwrite WMWindowAttributes 'GSDE-Safe-Mode.XTerm'  '{ DontSaveSession = Yes; NoAppIcon = Yes; StartMiniaturized = Yes; Omnipresent = Yes; }'
  wdwrite WMWindowAttributes 'GWorkspace.GNUstep'    '{ DontSaveSession = Yes; NoAppIcon = Yes; }'
  wdwrite WMWindowAttributes 'GestureHelper.GNUstep' '{ DontSaveSession = Yes; NoAppIcon = Yes; }'
  wdwrite WMWindowAttributes 'NotMon.GNUstep'        '{ DontSaveSession = Yes; SkipWindowList = Yes; SkipSwitchPanel = Yes; NoAppIcon = Yes; KeepOnTop = Yes; Omnipresent = Yes; }'
 
  if [ -f "$HOME/.gsderc" ];then
    echo "sourcing $HOME/.gsderc"
    . "$HOME/.gsderc"
  fi
}

function start_debug {
  WM_ARGS="--no-autolaunch --static --dont-restore"

  init_config
  main_process
  startup_scripts

  wait $GW_PID
  sleep 1
  cleanup
}

function wait_for_workspace {
  local c=0
  while [ $c -lt 20 ];do
    sleep 0.5
    (xwininfo -root -tree | grep -e 'File.Viewer.*GWorkspace.*') && return
    c=$((c + 1))
  done
}

function startup_scripts {
  /Library/bin/nxnotify show-modal-panel --title "GSDE" --info "Launching applications..."

  wait_for_workspace
  sleep 1
  /Library/Scripts/AutoLaunchApps

  /Library/bin/nxnotify hide-panel

  xrefresh
}

function save_screen {
  autorandr --force -s gsdesktop
}

function restore_screen {
  autorandr -c
}

function start_normal {
  WM_ARGS="--no-autolaunch --dont-restore"
 
  restore_screen
  init_config
  main_process
  startup_scripts
 
  wait $GW_PID
  sleep 1

  save_screen
  cleanup
}

function main_process {
  start_services
  sleep 0.3
  start_windowmanager
  sleep 0.3
  start_helpers
  sleep 0.3
  start_workspace 
  sleep 0.3
}

function cleanup {
  echo "cleanup"
  show_status "black"
 
  stop_workspace 
  stop_services
  stop_windowmanager
  exit
}

if [ "$UID" -eq 0 ];then
  echo "GNUstep Desktop cannot run as root"
  exit 1
fi

if ! xset b 0 ;then
  if [ -n "$DISPLAY" ];then
    echo "unable to open $DISPLAY"
    exit 1
  else
    echo "executing startx"
    exec startx /System/bin/startgsde $*
  fi
fi

echo "=================================================="
echo " Starting GNUstep Desktop"
echo "=================================================="

if [ "$1" == "--safe-mode-continue" ];then
  export GS_DESKTOP_SAFEMODE="safe"
  echo ""

  echo "you are running in the safe mode"
  echo "WARNING: you will not be able to modify the dock!"
  echo ""
  echo "use use the following commands to start:"
  echo ""
  echo " /System/bin/startgsde        - start the desktop"
  echo " /System/bin/startgsde-xnest  - use separate Xserver (Xnest)"
  echo " /System/bin/startgsde-wmaker - start the wm (very limited!)"
  echo ""

  exec $SHELL
fi

if [ "$1" == "--safe-mode" ];then
  exec xterm -bg black -fg gray -bd green -geometry 160x18+0-0 -name GSDE-Safe-Mode -e "$0" --safe-mode-continue
fi

show_status "black"

## clean up
rm -R "/tmp/GNUstepSecure$UID" 2>/dev/null

## set system env variables
export WMAKER_USER_ROOT="$HOME/Library/WindowMaker"
export PATH="/System/bin:/Library/bin:$HOME/Library/Scripts:/Library/Scripts:$PATH"
export MANPATH=":/System/share/man:/Library/Documentation/man"
export GS_DESKTOP_LOG="/tmp/$UID-gs-desktop.log"
export GS_DESKTOP_ID="$$"
export BROWSER="/Library/bin/nxbrowser"

## unset envs in case we are running from a terminal window
unset XTERM_VERSION
unset XTERM_SHELL
unset XTERM_LOCAL

source /Developer/Makefiles/GNUstep.sh

WM_ARGS=""
trap cleanup SIGINT

if [ -n "$GS_DESKTOP_SAFEMODE" ];then
  echo "running in SAFE mode"
  if [ "$GS_DESKTOP_SAFEMODE" = "xnest" ];then
    echo "logging to $GS_DESKTOP_LOG"
    start_debug > $GS_DESKTOP_LOG 2>&1
  else
    START_PICOM="yes"
    start_debug |& tee $GS_DESKTOP_LOG
  fi
else
  START_PICOM="yes"
  start_normal > $GS_DESKTOP_LOG 2>&1
fi
